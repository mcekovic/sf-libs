package org.strangeforest.db;

import java.util.*;
import java.sql.*;
import java.util.concurrent.*;

final class ConnectionProxy implements Connection {

	private PooledConnection pooledConn;
	private Connection conn;
	private boolean isBad;
	private boolean tranResolved;
	private boolean managed;

	ConnectionProxy(PooledConnection pooledConn) {
		super();
		this.pooledConn = pooledConn;
		this.conn = pooledConn.getConnection();
		tranResolved = true;
	}

	PooledConnection getPooledConnection() {
		return pooledConn;
	}

	Connection getConnection() {
		return conn;
	}

	public void markBad() {
		isBad = true;
	}

	void setManaged(boolean managed) {
		this.managed = managed;
	}


	// Connection methods

	@Override public void close() throws SQLException {
		if (!managed) {
			if (conn != null) {
				if (!isBad)
					pooledConn.returnToPool(tranResolved);
				else
					pooledConn.removeFromPool(tranResolved);
				pooledConn = null;
				conn = null;
			}
		}
	}

	@Override public boolean isClosed() throws SQLException {
		return conn != null;
	}

	@Override public boolean isValid(int timeout) throws SQLException {
		return !isClosed() && pooledConn.checkConnection();
	}

	@Override public Clob createClob() throws SQLException {
		checkIfOpen();
		return conn.createClob();
	}

	@Override public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
		checkIfOpen();
		return conn.createArrayOf(typeName, elements);
	}

	@Override public Blob createBlob() throws SQLException {
		checkIfOpen();
		return conn.createBlob();
	}

	@Override public NClob createNClob() throws SQLException {
		checkIfOpen();
		return conn.createNClob();
	}

	@Override public SQLXML createSQLXML() throws SQLException {
		checkIfOpen();
		return conn.createSQLXML();
	}

	@Override public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
		checkIfOpen();
		return conn.createStruct(typeName, attributes);
	}

	@Override public Statement createStatement() throws SQLException {
		checkIfOpen();
		return new StatementHelper(pooledConn, conn.createStatement());
	}

	@Override public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		checkIfOpen();
		return new StatementHelper(pooledConn, conn.createStatement(resultSetType, resultSetConcurrency));
	}

	@Override public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		checkIfOpen();
		return new StatementHelper(pooledConn, conn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability));
	}

	@Override public PreparedStatement prepareStatement(String sql) throws SQLException {
		checkIfOpen();
		return pooledConn.prepareStatement(sql);
	}

	@Override public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		checkIfOpen();
		return pooledConn.prepareStatement(sql, resultSetType, resultSetConcurrency);
	}

	@Override public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		checkIfOpen();
		return pooledConn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
	}

	@Override public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		checkIfOpen();
		return pooledConn.prepareStatement(sql, autoGeneratedKeys);
	}

	@Override public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		checkIfOpen();
		return pooledConn.prepareStatement(sql, columnIndexes);
	}

	@Override public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		checkIfOpen();
		return pooledConn.prepareStatement(sql, columnNames);
	}

	@Override public CallableStatement prepareCall(String sql) throws SQLException {
		checkIfOpen();
		return pooledConn.prepareCall(sql);
	}

	@Override public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		checkIfOpen();
		return pooledConn.prepareCall(sql, resultSetType, resultSetConcurrency);
	}

	@Override public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		checkIfOpen();
		return pooledConn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
	}

	@Override public String nativeSQL(String sql) throws SQLException {
		checkIfOpen();
		return conn.nativeSQL(sql);
	}

	@Override public boolean getAutoCommit() throws SQLException {
		checkIfOpen();
		return conn.getAutoCommit();
	}

	@Override public void setAutoCommit(boolean autoCommit) throws SQLException {
		checkIfOpen();
		if (!managed) {
			conn.setAutoCommit(autoCommit);
			tranResolved = autoCommit;
		}
	}

	@Override public Properties getClientInfo() throws SQLException {
		checkIfOpen();
		return conn.getClientInfo();
	}

	@Override public void setClientInfo(Properties properties) throws SQLClientInfoException {
		conn.setClientInfo(properties);
	}

	@Override public String getClientInfo(String name) throws SQLException {
		checkIfOpen();
		return conn.getClientInfo(name);
	}

	@Override public void setClientInfo(String name, String value) throws SQLClientInfoException {
		conn.setClientInfo(name, value);
	}

	@Override public void commit() throws SQLException {
		checkIfOpen();
		if (!managed) {
			conn.commit();
			tranResolved = true;
		}
	}

	@Override public void rollback() throws SQLException {
		checkIfOpen();
		if (!managed) {
			conn.rollback();
			tranResolved = true;
		}
	}

	@Override public Savepoint setSavepoint() throws SQLException {
		checkIfOpen();
		return conn.setSavepoint();
	}

	@Override public Savepoint setSavepoint(String name) throws SQLException {
		checkIfOpen();
		return conn.setSavepoint(name);
	}

	@Override public void rollback(Savepoint savepoint) throws SQLException {
		checkIfOpen();
		conn.rollback(savepoint);
	}

	@Override public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		checkIfOpen();
		conn.releaseSavepoint(savepoint);
	}

	@Override public DatabaseMetaData getMetaData() throws SQLException {
		checkIfOpen();
		return conn.getMetaData();
	}

	@Override public boolean isReadOnly() throws SQLException {
		checkIfOpen();
		return conn.isReadOnly();
	}

	@Override public void setReadOnly(boolean readOnly) throws SQLException {
		checkIfOpen();
		conn.setReadOnly(readOnly);
	}

	@Override public String getSchema() throws SQLException {
		checkIfOpen();
		return conn.getSchema();
	}

	@Override public void setSchema(String schema) throws SQLException {
		checkIfOpen();
		conn.setSchema(schema);
	}

	@Override public String getCatalog() throws SQLException {
		checkIfOpen();
		return conn.getCatalog();
	}

	@Override public void setCatalog(String catalog) throws SQLException {
		checkIfOpen();
		conn.setCatalog(catalog);
	}

	@Override public int getTransactionIsolation() throws SQLException {
		checkIfOpen();
		return conn.getTransactionIsolation();
	}

	@Override public void setTransactionIsolation(int level) throws SQLException {
		checkIfOpen();
		conn.setTransactionIsolation(level);
	}


	@Override public void abort(Executor executor) throws SQLException {
		checkIfOpen();
		conn.abort(executor);
	}

	@Override public int getNetworkTimeout() throws SQLException {
		checkIfOpen();
		return conn.getNetworkTimeout();
	}

	@Override public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
		checkIfOpen();
		conn.setNetworkTimeout(executor, milliseconds);
	}

	@Override public SQLWarning getWarnings() throws SQLException {
		checkIfOpen();
		return conn.getWarnings();
	}

	@Override public void clearWarnings() throws SQLException {
		checkIfOpen();
		conn.clearWarnings();
	}

	@Override public Map<String,Class<?>> getTypeMap() throws SQLException {
		checkIfOpen();
		return conn.getTypeMap();
	}

	@Override public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		checkIfOpen();
		conn.setTypeMap(map);
	}

	@Override public void setHoldability(int holdability) throws SQLException {
		checkIfOpen();
		conn.setHoldability(holdability);
	}

	@Override public int getHoldability() throws SQLException {
		checkIfOpen();
		return conn.getHoldability();
	}

	@Override public <T> T unwrap(Class<T> iface) throws SQLException {
		return iface.isInstance(this) ? (T)this : conn.unwrap(iface);
	}

	@Override public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return iface.isInstance(this) || conn.isWrapperFor(iface);
	}

	private void checkIfOpen() throws SQLException {
		if (conn == null)
			throw new SQLException("Can't perform operation on closed Connection.");
	}

	@Override protected void finalize() throws Throwable {
		if (conn != null)
			close();
		super.finalize();
	}
}
